{"version":3,"sources":["components/Header/Header.jsx","components/Task/Task.jsx","components/TaskList/TaskList.jsx","components/TasksFilter/TasksFilter.jsx","components/Footer/Footer.jsx","components/App/App.jsx","index.js"],"names":["Header","state","value","onSubmit","event","addTask","props","preventDefault","setState","onInputChange","target","this","className","placeholder","onChange","Component","Task","id","description","time","deleteTask","onToggleCompleted","onEditing","editing","active","date","formatDistanceToNow","includeSeconds","classNames","checked","type","onClick","defaultValue","TaskList","tasks","map","item","key","defaultProps","TasksFilter","changeFilter","filterProp","Footer","callDeleteForAll","filter","forEach","leftCount","App","maxId","createTask","text","newItem","i","findIndex","el","slice","toggleProps","arr","propName","oldTask","newTask","Date","now","filteredTasks","completedCount","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4fc43599.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Header extends Component {\n  static propTypes = {\n    addTask: PropTypes.func.isRequired,\n  };\n\n  state = {\n    value: '',\n  };\n\n  onSubmit = (event) => {\n    const { value } = this.state;\n    const { addTask } = this.props;\n    event.preventDefault();\n    if (value) {\n      addTask(value);\n    }\n    this.setState({ value: '' });\n  };\n\n  onInputChange = (event) => {\n    this.setState({ value: event.target.value });\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <form className=\"header\" onSubmit={this.onSubmit}>\n        <h1>todos</h1>\n        <input className=\"new-todo\" placeholder=\"What needs to be done?\" onChange={this.onInputChange} value={value} />\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport PropTypes from 'prop-types';\n\nconst Task = ({ id, description, time, deleteTask, onToggleCompleted, onEditing, editing, active }) => {\n  const date = formatDistanceToNow(time, {\n    includeSeconds: true,\n  });\n\n  let classNames = '';\n\n  if (!active) {\n    classNames += ' completed';\n  }\n  if (active) {\n    classNames += ' active';\n  }\n  if (editing) {\n    classNames += ' editing';\n  }\n  return (\n    <li className={classNames}>\n      <div className=\"view\">\n        <input checked={!active} className=\"toggle\" type=\"checkbox\" onChange={() => onToggleCompleted(id)} />\n        <label>\n          <span className=\"description\">{description}</span>\n          <span className=\"created\">{date}</span>\n        </label>\n        <button aria-label=\"edit btn\" type=\"button\" className=\"icon icon-edit\" onClick={() => onEditing(id)} />\n        <button aria-label=\"delete btn\" type=\"button\" className=\"icon icon-destroy\" onClick={() => deleteTask(id)} />\n      </div>\n      {editing && <input type=\"text\" className=\"edit\" defaultValue=\"Editing task\" />}\n    </li>\n  );\n};\n\nTask.propTypes = {\n  id: PropTypes.number.isRequired,\n  description: PropTypes.string.isRequired,\n  time: PropTypes.number.isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  onToggleCompleted: PropTypes.func.isRequired,\n  onEditing: PropTypes.func.isRequired,\n  editing: PropTypes.bool.isRequired,\n  active: PropTypes.bool.isRequired,\n};\n\nexport default Task;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from '../Task/Task';\n\nconst TaskList = ({ tasks, deleteTask, onToggleCompleted, onEditing }) => (\n  <ul className=\"todo-list\">\n    {tasks.map((item) => (\n      <Task\n        {...item}\n        key={item.id}\n        deleteTask={(id) => deleteTask(id)}\n        onToggleCompleted={(id) => onToggleCompleted(id)}\n        onEditing={(id) => onEditing(id)}\n      />\n    ))}\n  </ul>\n);\n\nTaskList.defaultProps = {\n  tasks: [],\n};\n\nTaskList.propTypes = {\n  tasks: PropTypes.arrayOf(PropTypes.object),\n  deleteTask: PropTypes.func.isRequired,\n  onToggleCompleted: PropTypes.func.isRequired,\n  onEditing: PropTypes.func.isRequired,\n};\n\nexport default TaskList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TasksFilter = ({ changeFilter, filterProp }) => (\n  <ul className=\"filters\">\n    <li>\n      <button type=\"button\" className={filterProp === 'all' ? 'selected' : null} onClick={() => changeFilter('all')}>\n        All\n      </button>\n    </li>\n    <li>\n      <button\n        type=\"button\"\n        className={filterProp === 'active' ? 'selected' : null}\n        onClick={() => changeFilter('active')}\n      >\n        Active\n      </button>\n    </li>\n    <li>\n      <button\n        type=\"button\"\n        className={filterProp === 'completed' ? 'selected' : null}\n        onClick={() => changeFilter('completed')}\n      >\n        Completed\n      </button>\n    </li>\n  </ul>\n);\n\nTasksFilter.propTypes = {\n  changeFilter: PropTypes.func.isRequired,\n  filterProp: PropTypes.func.isRequired,\n};\n\nexport default TasksFilter;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TasksFilter from '../TasksFilter/TasksFilter';\n\nexport default class Footer extends Component {\n  static defaultProps = {\n    leftCount: 0,\n    filterProp: 'all',\n  };\n\n  static propTypes = {\n    leftCount: PropTypes.number,\n    filterProp: PropTypes.string,\n    tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n    deleteTask: PropTypes.func.isRequired,\n    changeFilter: PropTypes.func.isRequired,\n  };\n\n  callDeleteForAll = () => {\n    const { tasks, deleteTask } = this.props;\n    const ids = tasks.filter((item) => !item.active).map((item) => item.id);\n    ids.forEach((id) => deleteTask(id));\n  };\n\n  render() {\n    const { leftCount, changeFilter, filterProp } = this.props;\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">{leftCount} items left</span>\n        <TasksFilter changeFilter={(filterProp) => changeFilter(filterProp)} filterProp={filterProp} />\n        <button type=\"button\" className=\"clear-completed\" onClick={this.callDeleteForAll}>\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Header from '../Header/Header';\nimport TaskList from '../TaskList/TaskList';\nimport Footer from '../Footer/Footer';\n\nexport default class App extends Component {\n  maxId = 100;\n\n  state = {\n    tasks: [this.createTask('Completed task'), this.createTask('Editing task'), this.createTask('Active task')],\n    filterProp: 'all',\n  };\n\n  changeFilter = (filterProp) => {\n    this.setState({\n      filterProp,\n    });\n  };\n\n  addTask = (text, date) => {\n    const newItem = this.createTask(text, date);\n    this.setState(({ tasks }) => {\n      const newArr = [...tasks, newItem];\n      return {\n        tasks: newArr,\n      };\n    });\n  };\n\n  deleteTask = (id) => {\n    this.setState(({ tasks }) => {\n      const i = tasks.findIndex((el) => el.id === id);\n      const newTasks = [...tasks.slice(0, i), ...tasks.slice(i + 1)];\n      return {\n        tasks: newTasks,\n      };\n    });\n  };\n\n  onToggleCompleted = (id) => {\n    this.setState(({ tasks }) => ({ tasks: this.toggleProps(tasks, id, 'active') }));\n  };\n\n  onEditing = (id) => {\n    this.setState(({ tasks }) => ({ tasks: this.toggleProps(tasks, id, 'editing') }));\n  };\n\n  toggleProps(arr, id, propName) {\n    const i = arr.findIndex((el) => el.id === id);\n    const oldTask = arr[i];\n    const newTask = { ...oldTask, [propName]: !oldTask[propName] };\n    return [...arr.slice(0, i), newTask, ...arr.slice(i + 1)];\n  }\n\n  createTask(text) {\n    const date = Date.now();\n    this.maxId += this.maxId;\n    return {\n      description: text,\n      time: date,\n      id: this.maxId,\n      editing: false,\n      active: true,\n    };\n  }\n\n  render() {\n    const { tasks, filterProp } = this.state;\n    const filteredTasks =\n      filterProp === 'all' ? tasks : tasks.filter((item) => (filterProp === 'completed' ? !item.active : item.active));\n    const completedCount = tasks.filter((el) => !el.active).length;\n    const leftCount = tasks.length - completedCount;\n    return (\n      <section className=\"todoapp\">\n        <Header addTask={this.addTask} />\n        <section className=\"main\">\n          <TaskList\n            tasks={filteredTasks}\n            deleteTask={(id) => this.deleteTask(id)}\n            onToggleCompleted={(id) => this.onToggleCompleted(id)}\n            onEditing={(id) => this.onEditing(id)}\n          />\n          <Footer\n            leftCount={leftCount}\n            filterProp={filterProp}\n            tasks={tasks}\n            deleteTask={(id) => this.deleteTask(id)}\n            changeFilter={(filterProp) => this.changeFilter(filterProp)}\n          />\n        </section>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}